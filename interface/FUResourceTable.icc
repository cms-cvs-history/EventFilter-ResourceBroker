////////////////////////////////////////////////////////////////////////////////
//
// FUResourceTable.icc: implementation of inline member functions
// --------------------
//
//            20/11/2006 Philipp Schieferdecker <philipp.schieferdecker@cern.ch>
////////////////////////////////////////////////////////////////////////////////


//______________________________________________________________________________
inline
bool evf::FUResourceTable::popBuIdToBeDiscarded(UInt_t& buIdtoBeDiscarded)
{
  if (!buIdsToBeDiscarded_.size()) return false;
  buIdtoBeDiscarded=buIdsToBeDiscarded_.back();
  buIdsToBeDiscarded_.pop_back();
  return true;
}


//______________________________________________________________________________
inline
evf::UInt_t evf::FUResourceTable::nbFreeSlots() const
{
  return (shmMode_) ? shmBuffer_->writerSemValue() : freeResourceIds_.size();
}


//______________________________________________________________________________
inline
evf::UInt_t evf::FUResourceTable::nbBytes(bool reset)
{
  lock();
  UInt_t result=nbBytes_;
  if (reset) nbBytes_=0;
  unlock();
  return result;
}


//______________________________________________________________________________
inline
void evf::FUResourceTable::lock()
{
  lock_.take();
}


//______________________________________________________________________________
inline
void evf::FUResourceTable::unlock()
{
  lock_.give();
}


//______________________________________________________________________________
inline
void evf::FUResourceTable::waitWriterSem()
{
  if (shmMode_) shmBuffer_->waitWriterSem();
  else          sem_wait(&writeSem_);
}


//______________________________________________________________________________
inline
void evf::FUResourceTable::postWriterSem()
{
  if (shmMode_) shmBuffer_->postWriterSem();
  else          sem_post(&writeSem_);
}


//______________________________________________________________________________
inline
void evf::FUResourceTable::waitReaderSem()
{
  if (shmMode_) shmBuffer_->waitReaderSem();
  else          sem_wait(&readSem_);
}


//______________________________________________________________________________
inline
void evf::FUResourceTable::postReaderSem()
{
  if (shmMode_) shmBuffer_->postReaderSem();
  else          sem_post(&readSem_);
}

